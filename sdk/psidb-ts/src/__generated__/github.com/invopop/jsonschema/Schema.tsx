import { makeSchema, PrimitiveTypes, MapOf, ArrayOf } from "@psidb/psidb-sdk/client/schema";
import { OrderedMap } from "@psidb/psidb-sdk/types/github.com/iancoleman/orderedmap/OrderedMap";

const _F = {} as any

export class Schema extends makeSchema("github.com/invopop/jsonschema/Schema", {
    "$anchor": PrimitiveTypes.String,
    "$comment": PrimitiveTypes.String,
    "$defs": MapOf(PrimitiveTypes.String, _F["Schema"]),
    "$dynamicRef": PrimitiveTypes.String,
    "$id": PrimitiveTypes.String,
    "$ref": PrimitiveTypes.String,
    "$schema": PrimitiveTypes.String,
    additionalProperties: _F["Schema"],
    allOf: ArrayOf(_F["Schema"]),
    anyOf: ArrayOf(_F["Schema"]),
    const: PrimitiveTypes.Any,
    contains: _F["Schema"],
    contentEncoding: PrimitiveTypes.String,
    contentMediaType: PrimitiveTypes.String,
    contentSchema: _F["Schema"],
    default: PrimitiveTypes.Any,
    dependentRequired: MapOf(PrimitiveTypes.String, PrimitiveTypes.Array(PrimitiveTypes.String)),
    dependentSchemas: MapOf(PrimitiveTypes.String, _F["Schema"]),
    deprecated: PrimitiveTypes.Boolean,
    description: PrimitiveTypes.String,
    else: _F["Schema"],
    enum: ArrayOf(PrimitiveTypes.Any),
    examples: ArrayOf(PrimitiveTypes.Any),
    exclusiveMaximum: PrimitiveTypes.Boolean,
    exclusiveMinimum: PrimitiveTypes.Boolean,
    format: PrimitiveTypes.String,
    if: _F["Schema"],
    items: _F["Schema"],
    maxContains: PrimitiveTypes.Float64,
    maxItems: PrimitiveTypes.Float64,
    maxLength: PrimitiveTypes.Float64,
    maxProperties: PrimitiveTypes.Float64,
    maximum: PrimitiveTypes.Float64,
    minContains: PrimitiveTypes.Float64,
    minItems: PrimitiveTypes.Float64,
    minLength: PrimitiveTypes.Float64,
    minProperties: PrimitiveTypes.Float64,
    minimum: PrimitiveTypes.Float64,
    multipleOf: PrimitiveTypes.Float64,
    not: _F["Schema"],
    oneOf: ArrayOf(_F["Schema"]),
    pattern: PrimitiveTypes.String,
    patternProperties: MapOf(PrimitiveTypes.String, _F["Schema"]),
    prefixItems: ArrayOf(_F["Schema"]),
    properties: OrderedMap,
    propertyNames: _F["Schema"],
    readOnly: PrimitiveTypes.Boolean,
    required: ArrayOf(PrimitiveTypes.String),
    then: _F["Schema"],
    title: PrimitiveTypes.String,
    type: PrimitiveTypes.String,
    uniqueItems: PrimitiveTypes.Boolean,
    writeOnly: PrimitiveTypes.Boolean,
}) {}
_F["Schema"] = Schema;
